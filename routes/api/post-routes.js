const router = require('express').Router();

//User model was included as well so we can run JOIN queries with Post and User models
const { Post, User } = require('../../models');

// Get all users
router.get('/', (req, res) => {
    console.log('==============');
    Post.findAll({
        //Query configuration

        //Retrieve the following columns from the Post model
        attributes: ['id', 'post_url', 'title', 'created_at'], //'created_at' column is autogenerated by Sequelize when the model was made
        // Order search results from newest to oldest
        order: [['created_at', 'DESC']],
        //Retrive a column from the User model as well
        include: [
            {
                model: User,
                attributes: ['username']
            }
        ]
    })
    // Create promises that capture the response from the DB call
    .then(dbPostData => res.json(dbPostData))
    .catch(err => {
        console.log(err);
        res.status(500).json(err);
    });
});

// Get a single post
router.get('/:id', (req,res) => {
    Post.findOne({
        where: {
            id: req.params.id
        },
        attributes: ['id', 'post_url', 'title', 'created_at'],
        include: [
            {
                model: User,
                attributes: ['username']
            }
        ]
    })
    .then(dbPostData => {
        if(!dbPostData) {
            res.status(404).json({ message: 'No post found with this id'});
            return;
        }
        res.json(dbPostData);
    })
    .catch(err => {
        console.log(err);
        res.status(500).json(err);
    });
});

// Create a single post
router.post('/', (req, res) => {
    // expects JSON with following keys: title, post_url, user_id
    Post.create({
        title: req.body.title,
        post_url: req.body.post_url,
        user_id: req.body.user_id
    })
    .then(dbPostData => res.json(dbPostData))
    .catch(err => {
        console.log(err);
        res.status(500).json(err);
    });
});

// Update an existing post (just the title only)
router.put('/:id', (req, res) => {
    Post.update(
        {
            title: req.body.title
        },
        {
            where: {
                id: req.params.id
            }
        }
    )
    .then(dbPostData => {
        if(!dbPostData) {
            res.status(404).json({message: 'No post found with this id'});
            return;
        }
        // If the corresponding post is found, a "1" will be returned to verify that 1 row has changed in the last query
        res.json(dbPostData);
    })
    .catch(err => {
        console.log(err);
        res.status(500).json(err);
    });
});

// Delete a post
router.delete('/:id', (req,res) => {
    Post.destroy({
        where: {
            id: req.params.id
        }
    })
    .then(dbPostData => {
        if(!dbPostData) {
            res.status(404).json({ message: "No post found with this id" });
            // My Q: Why is a return statement needed?
            return;
        }
        res.json(dbPostData);
    })
    .catch(err => {
        console.log(err);
        // My Q: Why error 500 instaed of 404?
        res.status(500).json(err);
    });
})

module.exports = router;